// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createExchangeRate = `-- name: CreateExchangeRate :exec
INSERT INTO exchanges_rates(
	code
	,code_un
	,name
	,high
	,low
	,var_bid
	,pct_change
	,bid
	,ask
	,timestamp
	,create_date
) VALUES (
	?,?,?,?,?,?,?,?,?,?,?
)
`

type CreateExchangeRateParams struct {
	Code       sql.NullString
	CodeUn     sql.NullString
	Name       sql.NullString
	High       sql.NullString
	Low        sql.NullString
	VarBid     sql.NullString
	PctChange  sql.NullString
	Bid        sql.NullString
	Ask        sql.NullString
	Timestamp  sql.NullString
	CreateDate sql.NullString
}

func (q *Queries) CreateExchangeRate(ctx context.Context, arg CreateExchangeRateParams) error {
	_, err := q.db.ExecContext(ctx, createExchangeRate,
		arg.Code,
		arg.CodeUn,
		arg.Name,
		arg.High,
		arg.Low,
		arg.VarBid,
		arg.PctChange,
		arg.Bid,
		arg.Ask,
		arg.Timestamp,
		arg.CreateDate,
	)
	return err
}

const listExchangeRate = `-- name: ListExchangeRate :many
SELECT id, code, code_un, name, high, low, var_bid, pct_change, bid, ask, timestamp, create_date FROM exchanges_rates
`

func (q *Queries) ListExchangeRate(ctx context.Context) ([]ExchangesRate, error) {
	rows, err := q.db.QueryContext(ctx, listExchangeRate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExchangesRate
	for rows.Next() {
		var i ExchangesRate
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.CodeUn,
			&i.Name,
			&i.High,
			&i.Low,
			&i.VarBid,
			&i.PctChange,
			&i.Bid,
			&i.Ask,
			&i.Timestamp,
			&i.CreateDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
